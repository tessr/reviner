// Generated by CoffeeScript 1.6.1
(function() {
  var Post, Revine, Vino, app, ejs, express, mongoose, postSchema, revineSchema, troop;

  express = require('express');

  Vino = require('./vino');

  app = express();

  mongoose = require('mongoose');

  troop = require('mongoose-troop');

  ejs = require('ejs');

  ejs.open = '{{';

  ejs.close = '}}';

  mongoose.connect('mongodb://batman:robin@dharma.mongohq.com:10023/reviner');

  app.configure(function() {
    app.use(express["static"]("" + __dirname + "/public"));
    app.set('env', process.env.NODE_ENV || 'development');
    app.set('port', process.env.PORT || 3000);
    app.use(express.bodyParser());
    app.set('views', __dirname + '/views');
    app.set('view engine', 'ejs');
    app.use(express.cookieParser('fuck this shit'));
    return app.use(express.session());
  });

  revineSchema = new mongoose.Schema({
    userId: Number
  });

  revineSchema.plugin(troop.timestamp);

  Revine = mongoose.model('Revine', revineSchema);

  postSchema = new mongoose.Schema({
    avatarUrl: String,
    userId: Number,
    description: String,
    location: String,
    postId: Number,
    shareUrl: String,
    thumbnailUrl: String,
    user: {},
    videoUrl: String,
    foursquareVenueId: {},
    revines: [revineSchema],
    timesRevined: {
      type: Number,
      "default": 1
    }
  });

  postSchema.plugin(troop.timestamp);

  Post = mongoose.model('Post', postSchema);

  app.get('/', function(req, res) {
    var client;
    if (req.session.sessionId) {
      client = new Vino({
        sessionId: req.session.sessionId
      });
      return client.homeFeed(function(err, feed) {
        if (err != null) {
          res.send({
            error: err
          }, 500);
        }
        return res.render('index', {
          feed: feed
        });
      });
    } else {
      return res.redirect('/login.html');
    }
  });

  app.get('/login', function(req, res) {
    return res.redirect('/login.html');
  });

  app.post('/login', function(req, res) {
    var client;
    client = new Vino({
      username: req.param('username'),
      password: req.param('password')
    });
    return client.login(function(err, sessionId, userId) {
      if (err != null) {
        return res.redirect('/login.html');
      } else {
        req.session.sessionId = sessionId;
        return res.redirect('/');
      }
    });
  });

  app.post('/register', function(req, res) {
    var client;
    client = new Vino();
    return client.register(req.param('username'), req.param('email'), req.param('password'), function(err, sessionId) {
      if (err != null) {
        return res.redirect('/login.html');
      } else {
        req.session.sessionId = sessionId;
        return res.redirect('/');
      }
    });
  });

  app.post('/revines', function(req, res) {
    var client, post;
    post = req.body;
    client = new Vino({
      sessionId: req.session.sessionId
    });
    client.revine({
      thumbnailUrl: post.thumbnailUrl.replace("/v/", "/").replace(/\?.*/, ""),
      videoUrl: post.videoUrl.replace("/v/", "/").replace(/\?.*/, ""),
      description: "RV: " + post.description,
      postToTwitter: post.postToTwitter
    });
    return Post.findOne({
      videoUrl: post.videoUrl
    }, function(err, doc) {
      if (err != null) {
        res.status({
          error: err
        }, 500);
      }
      if (doc != null) {
        doc.revines.push(new Revine({
          userId: post.userId
        }));
        post.timesRevined++;
      } else {
        post.revines = [
          new Revine({
            userId: post.userId
          })
        ];
        doc = new Post(post);
      }
      return doc.save(function(err) {
        if (err != null) {
          res.send({
            error: err
          }, 500);
        }
        return res.send(doc, 200);
      });
    });
  });

  app.get('/revines', function(req, res) {
    return Post.find().sort({
      updated_at: -1
    }).limit(20).exec(function(err, docs) {
      if (err != null) {
        res.send({
          error: err
        }, 500);
      }
      return res.send(docs, 200);
    });
  });

  app.get('/revines/top', function(req, res) {
    return Post.find().sort({
      timesRevined: -1
    }).limit(20).exec(function(err, docs) {
      if (err != null) {
        res.send({
          error: err
        }, 500);
      }
      return res.send(docs);
    });
  });

  app.get('/top', function(req, res) {
    return Post.find().sort({
      timesRevined: -1
    }).limit(20).exec(function(err, docs) {
      if (err != null) {
        res.send({
          error: err
        }, 500);
      }
      return res.render('index', {
        feed: {
          records: docs
        }
      });
    });
  });

  app.listen(app.get('port'), function() {
    return console.log("Listening on " + (app.get('port')));
  });

}).call(this);
