// Generated by CoffeeScript 1.6.1
(function() {
  var RevineView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.timeSince = function(ts) {
    var days, delta, hou, min, now;
    now = new Date();
    ts = new Date(ts);
    delta = now.getTime() - ts.getTime();
    delta = delta / 1000;
    if (delta <= 59) {
      return Math.floor(delta) + "s";
    }
    if (delta >= 60 && delta <= 3599) {
      min = Math.floor(delta / 60);
      return min + "m";
    }
    if (delta >= 3600 && delta <= 86399) {
      hou = Math.floor(delta / 3600);
      return hou + "h";
    }
    if (delta >= 86400) {
      days = Math.floor(delta / 86400);
      return days + "d";
    }
  };

  RevineView = (function(_super) {

    __extends(RevineView, _super);

    function RevineView() {
      return RevineView.__super__.constructor.apply(this, arguments);
    }

    RevineView.prototype.className = 'row vine-container';

    RevineView.prototype.events = {
      'click .revine-button': 'revine',
      'click .twitter-share': 'toggleShare'
    };

    RevineView.prototype.toggleShare = function() {
      var postToTwitter;
      postToTwitter = this.model.get("postToTwitter") === 0 ? 1 : 0;
      this.model.set({
        postToTwitter: postToTwitter
      });
      return this.$el.toggleClass('postToTwitter');
    };

    RevineView.prototype.revine = function() {
      var _this = this;
      return $.ajax({
        method: 'POST',
        url: '/revines',
        data: this.model.toJSON()
      }).done(function(data) {
        var count;
        if (_this.model.get("revines").length) {
          count = _this.model.get("revines").length;
          _this.$el.find('.revine-button').html("ReVine (" + (count + 1) + " RVs)");
        }
        return $('.overlay').show('slow', function() {
          return $('.overlay').delay(1500).hide('slow');
        });
      });
    };

    RevineView.prototype.initialize = function(options) {
      this.model.set({
        postToTwitter: 0
      });
      if (!this.model.get("revines")) {
        this.model.set({
          revines: []
        });
      }
      return this.template = options.template;
    };

    RevineView.prototype.render = function() {
      var compiled;
      compiled = _.template(this.template, this.model.toJSON());
      this.$el.html(compiled);
      return this;
    };

    return RevineView;

  })(Backbone.View);

  $(function() {
    var post_template, revines, viewEls, views;
    post_template = $('#post-template').html();
    revines = new Backbone.Collection(Data.records);
    views = [];
    revines.each(function(revine) {
      var revine_view;
      revine_view = new RevineView({
        model: revine,
        template: post_template
      });
      return views.push(revine_view.render());
    });
    viewEls = _.pluck(views, 'el');
    return $('#container').html(viewEls);
  });

}).call(this);
