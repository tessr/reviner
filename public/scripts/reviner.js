// Generated by CoffeeScript 1.6.1
(function() {
  var RevineView, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.prettyDate = function(date_str) {
    var format, i, list_choice, seconds, time, time_formats, token;
    time_formats = [[60, "just now", 1], [120, "1m", "1 minute from now"], [3600, "m", 60], [7200, "1h", "1 hour from now"], [86400, "h", 3600], [172800, "yesterday", "tomorrow"], [604800, "d", 86400], [1209600, "last week", "next week"], [2419200, "weeks", 604800], [4838400, "last month", "next month"], [29030400, "months", 2419200], [58060800, "last year", "next year"], [2903040000, "years", 29030400], [5806080000, "last century", "next century"], [58060800000, "centuries", 2903040000]];
    time = ("" + date_str).replace(/-/g, "/").replace(/[TZ]/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
    if (time.substr(time.length - 4, 1) === ".") {
      time = time.substr(0, time.length - 4);
    }
    seconds = (new Date - new Date(time)) / 1000;
    token = "ago";
    list_choice = 1;
    if (seconds < 0) {
      seconds = Math.abs(seconds);
      token = "from now";
      list_choice = 2;
    }
    i = 0;
    format = void 0;
    while (format = time_formats[i++]) {
      if (seconds < format[0]) {
        if (typeof format[2] === "string") {
          return format[list_choice];
        } else {
          return Math.floor(seconds / format[2]) + format[1];
        }
      }
    }
    return time;
  };

  RevineView = (function(_super) {

    __extends(RevineView, _super);

    function RevineView() {
      return RevineView.__super__.constructor.apply(this, arguments);
    }

    RevineView.prototype.className = 'row vine-container';

    RevineView.prototype.events = {
      'click .revine-button': 'revine',
      'click .twitter-share': 'toggleShare'
    };

    RevineView.prototype.toggleShare = function() {
      var postToTwitter;
      postToTwitter = this.model.get("postToTwitter") === 0 ? 1 : 0;
      this.model.set({
        postToTwitter: postToTwitter
      });
      return this.$el.toggleClass('postToTwitter');
    };

    RevineView.prototype.revine = function() {
      var _this = this;
      return $.ajax({
        method: 'POST',
        url: '/revines',
        data: this.model.toJSON()
      }).done(function(data) {
        var count;
        if (_this.model.get("revines").length) {
          count = _this.model.get("revines").length;
          _this.$el.find('.revine-button').html("ReVine (" + (count + 1) + " RVs)");
        }
        return $('.overlay').show('slow', function() {
          return $('.overlay').delay(1500).hide('slow');
        });
      });
    };

    RevineView.prototype.initialize = function(options) {
      this.model.set({
        postToTwitter: 0
      });
      if (!this.model.get("revines")) {
        this.model.set({
          revines: []
        });
      }
      return this.template = options.template;
    };

    RevineView.prototype.render = function() {
      var compiled;
      compiled = _.template(this.template, this.model.toJSON());
      this.$el.html(compiled);
      return this;
    };

    return RevineView;

  })(Backbone.View);

  $(function() {
    var post_template, revines, viewEls, views;
    post_template = $('#post-template').html();
    revines = new Backbone.Collection(Data.records);
    views = [];
    revines.each(function(revine) {
      var revine_view;
      revine_view = new RevineView({
        model: revine,
        template: post_template
      });
      return views.push(revine_view.render());
    });
    viewEls = _.pluck(views, 'el');
    return $('#container').html(viewEls);
  });

}).call(this);
