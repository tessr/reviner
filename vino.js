// Generated by CoffeeScript 1.6.1
(function() {
  var VINO_DEFAULT_OPTS, Vino, extend, request;

  VINO_DEFAULT_OPTS = {
    baseUrl: 'https://api.vineapp.com/',
    userAgent: 'com.vine.iphone/1.0.7 (unknown, iPhone OS 6.1.2, iPhone, Scale/2.000000)'
  };

  request = require("request");

  extend = function(target, source) {
    var keys, name, _i, _len;
    keys = Object.keys(source);
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      name = keys[_i];
      target[name] = source[name];
    }
    return target;
  };

  Vino = (function() {

    function Vino(options) {
      options || (options = {});
      if ('sessionId' in options) {
        this.sessionId = options.sessionId;
      }
      this.opts = extend(VINO_DEFAULT_OPTS, options);
    }

    Vino.prototype.homeFeed = function(cb) {
      var _this = this;
      if (!('sessionId' in this)) {
        throw new Error('must be logged in');
      }
      return request({
        url: this.opts.baseUrl + '/timelines/graph',
        method: 'get',
        headers: {
          'vine-session-id': this.sessionId,
          'User-Agent': this.opts.userAgent
        }
      }, function(err, resp, body) {
        if (err) {
          if (typeof cb === "function") {
            cb(err, resp);
          }
          return;
        }
        body = JSON.parse(body);
        if (body.code) {
          if (typeof cb === "function") {
            cb('homeFeed failure', body);
          }
          return;
        }
        return typeof cb === "function" ? cb(null, body.data) : void 0;
      });
    };

    Vino.prototype.login = function(cb) {
      var _this = this;
      if (!('username' in this.opts && 'password' in this.opts)) {
        throw new Error('username and pass required');
      }
      return request({
        url: this.opts.baseUrl + 'users/authenticate',
        method: 'post',
        form: {
          username: this.opts.username,
          password: this.opts.password
        },
        headers: {
          'User-Agent': this.opts.userAgent
        }
      }, function(err, resp, body) {
        body = JSON.parse(body);
        if (!body.success) {
          if (typeof cb === "function") {
            cb('login failure', body);
          }
          return;
        }
        _this.sessionId = body.data.key;
        _this.userId = body.data.userId;
        return typeof cb === "function" ? cb(null, _this.sessionId, _this.userId) : void 0;
      });
    };

    Vino.prototype.register = function(username, email, password, cb) {
      var _this = this;
      return request({
        url: this.opts.baseUrl + 'users',
        method: 'post',
        form: {
          username: username,
          email: email,
          password: password,
          authenticate: 1
        },
        headers: {
          'User-Agent': this.opts.userAgent
        }
      }, function(err, resp, body) {
        body = JSON.parse(body);
        if (!body.success) {
          if (typeof cb === "function") {
            cb('register failure', body);
          }
          return;
        }
        _this.sessionId = body.data.key;
        _this.userId = body.data.userId;
        return typeof cb === "function" ? cb(null, _this.sessionId, _this.userId) : void 0;
      });
    };

    Vino.prototype.revine = function(params, cb) {
      var _this = this;
      if (!('sessionId' in this)) {
        throw new Error('must be logged in');
      }
      return request({
        url: this.opts.baseUrl + 'posts',
        method: 'post',
        form: params,
        headers: {
          'vine-session-id': this.sessionId,
          'User-Agent': this.opts.userAgent
        }
      }, function(err, resp, body) {
        body = JSON.parse(body);
        if (!body.success) {
          if (typeof cb === "function") {
            cb('revine failure', body);
          }
          return;
        }
        return typeof cb === "function" ? cb(null, body) : void 0;
      });
    };

    Vino.prototype.tagSearch = function(tag, cb) {
      var _this = this;
      if (!('sessionId' in this)) {
        throw new Error('must be logged in');
      }
      return request({
        url: "" + this.opts.baseUrl + "timelines/tags/" + (encodeURIComponent(tag)),
        method: 'get',
        headers: {
          'vine-session-id': this.sessionId,
          'User-Agent': this.opts.userAgent
        }
      }, function(err, resp, body) {
        if (err) {
          if (typeof cb === "function") {
            cb(err, resp);
          }
          return;
        }
        body = JSON.parse(body);
        if (body.code) {
          if (typeof cb === "function") {
            cb('tagSearch failure', body);
          }
          return;
        }
        return typeof cb === "function" ? cb(null, body.data) : void 0;
      });
    };

    return Vino;

  })();

  module.exports = Vino;

}).call(this);
